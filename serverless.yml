service: amr-aws

app: amr-aws-app
org: madusha2018828

frameworkVersion: "2"

package:
  individually: true
  # exclude:
  #   - node_modules/**
  # #   - yolo-model/**

plugins:
  - serverless-python-requirements
  # - serverless-dynamodb-local
  # - serverless-offline

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: amr-user-pool-${self:custom.currentStage}
  userPoolClientName: amr-user-pool-client-${self:custom.currentStage}
  identityPoolName: amr_identity_pool_${self:custom.currentStage}
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
      port: 8000
      inMemory: true
    stages:
      - production
      - dev
    migration:
      dir: offline/migrations
  serverless-offline:
    resourceRoutes: true

provider:
  name: aws
  runtime: python3.6
  region: ap-southeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - lambda:InvokeFunction
      Resource:
        - arn:aws:dynamodb:ap-southeast-1:*:*
        - arn:aws:lambda:ap-southeast-1:*:*
    - Effect: Allow
      Action:
        - cognito-sync:*
        - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*

  apiGateway:
    binaryMediaTypes:
      - "*/*"

functions:
  test:
    handler: lambdas/handler.hello
    events:
      - http:
          path: test
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  update_push_token:
    handler: lambdas/fcm/push_token_handler.update_token
    events:
      - http:
          path: fcm/updatePushToken
          method: post

  send_push_notification:
    handler: lambdas/fcm/push_message_handler.send_notification
    module: lambdas/fcm
    events:
      - http:
          path: fcm/sendPushMessage
          method: post

  read_digits:
    handler: lambdas/meter_reader/handler.read_digits
    module: lambdas/meter_reader
    events:
      - http:
          path: meter_reader/read_digits
          method: post

  get_meter_history:
    handler: lambdas/meter_reader/meter_reader_history_handler.get_meter_history
    module: lambdas/meter_reader
    events:
      - http:
          path: meter_reader/getMeterHistory
          method: get

  get_bill_value:
    handler: lambdas/bill/bill_value_handler.get_bill_value
    module: lambdas/bill
    events:
      - http:
          path: bill/getBillValue
          method: post

  get_bill_history:
    handler: lambdas/bill/bill_history_handler.get_history
    module: lambdas/bill
    events:
      - http:
          path: bill/getHistory
          method: get

  save_payment:
    handler: lambdas/payment/payment_handler.save_payment
    module: lambdas/payment
    events:
      - http:
          path: payment/savePayment
          method: post
    package:
      pattern:
        - "utils/**"

  add_account:
    handler: lambdas/account/account_handler.add_account
    module: lambdas/account
    events:
      - http:
          path: account/addAccount
          method: post

resources:
  Resources:
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    DevicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: devicesTable
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BillTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: billTable
        AttributeDefinitions:
          - AttributeName: billId
            AttributeType: S
        KeySchema:
          - AttributeName: billId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MonthlyReadingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: monthlyReadingTable
        AttributeDefinitions:
          - AttributeName: readingId
            AttributeType: S
        KeySchema:
          - AttributeName: readingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PaymentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: paymentTable
        AttributeDefinitions:
          - AttributeName: transactionId
            AttributeType: S
        KeySchema:
          - AttributeName: transactionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AccountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: accountTable
        AttributeDefinitions:
          - AttributeName: accId
            AttributeType: S
        KeySchema:
          - AttributeName: accId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: true
          - Name: phone_number
            Required: true
            Mutable: true
          - Name: nic
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 9
              MaxLength: 12
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    # Creates a federeated Identity pool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:custom.identityPoolName}
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              "Fn::GetAtt": [CognitoUserPool, ProviderName]
        SupportedLoginProviders:
          "graph.facebook.com": "xxxxxxxxxx"
        OpenIdConnectProviderARNs:
          - "arn:aws:iam::xxxxxxxxxxx:oidc-provider/accounts.google.com"

    # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                    - "execute-api:Invoke"
                  Resource: "*"

    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            "Fn::GetAtt": [CognitoAuthorizedRole, Arn]
          unauthenticated:
            "Fn::GetAtt": [CognitoUnAuthorizedRole, Arn]
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: "UserPoolClient::Id"
