service: amr-aws

app: amr-aws-app
org: madusha2018828

frameworkVersion: "2"

package:
  individually: true
  # exclude:
  #   - node_modules/**
  #   - yolo-model/**

plugins:
  - serverless-python-requirements
  # - serverless-dynamodb-local
  # - serverless-offline

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - production
      - dev

provider:
  name: aws
  runtime: python3.6
  region: ap-southeast-1
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:us-east-1:923250232734:table/devicesTable"
  apiGateway:
    binaryMediaTypes:
      - "*/*"

functions:
  test:
    handler: lambdas/handler.hello
    events:
      - http:
          path: test
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  update_push_token:
    handler: lambdas/fcm/push_token_handler.update_token
    events:
      - http:
          path: fcm/updatePushToken
          method: post

  send_push_notification:
    handler: lambdas/fcm/push_message_handler.send_notification
    module: lambdas/fcm
    events:
      - http:
          path: fcm/sendPushMessage
          method: post

  read_digits:
    handler: lambdas/meter_reader/handler.read_digits
    module: lambdas/meter_reader
    events:
      - http:
          path: meter_reader/read_digits
          method: post

  get_bill_value:
    handler: lambdas/bill_value/bill_value_handler.get_bill_value
    events:
      - http:
          path: bill_value/get_bill_value
          method: get           

resources:
  Resources:
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    DevicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: devicesTable
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: true
          - Name: phone_number
            Required: true
            Mutable: true
          - Name: nic
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 9
              MaxLength: 12
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}
